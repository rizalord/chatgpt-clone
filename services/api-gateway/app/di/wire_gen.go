// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"api-gateway/app/config"
	"api-gateway/app/delivery/client"
	"api-gateway/app/delivery/http"
	"api-gateway/app/delivery/http/middleware"
	"api-gateway/app/route"
	"api-gateway/app/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializedApp() *config.App {
	logger := config.NewLogger()
	viper := config.NewViper(logger)
	app := config.NewFiber(viper)
	authClient := client.NewAuthClient(viper)
	authMiddleware := middleware.NewAuthMiddleware(authClient)
	websocketMiddleware := middleware.NewWebsocketMiddleware(authClient)
	validate := config.NewValidator()
	authUseCaseImpl := usecase.NewAuthUseCaseImpl(validate, logger, authClient)
	authController := http.NewAuthController(authUseCaseImpl)
	chatClient := client.NewChatClient(viper)
	chatUseCaseImpl := usecase.NewChatUseCaseImpl(validate, logger, authClient, chatClient)
	chatController := http.NewChatController(chatUseCaseImpl)
	httpRouter := route.NewHttpRouter(app, authMiddleware, websocketMiddleware, authController, chatController)
	configApp := config.NewApp(viper, httpRouter, authClient, chatClient)
	return configApp
}

// wire.go:

var authSet = wire.NewSet(usecase.NewAuthUseCaseImpl, wire.Bind(new(usecase.AuthUseCase), new(*usecase.AuthUseCaseImpl)), http.NewAuthController)

var chatSet = wire.NewSet(usecase.NewChatUseCaseImpl, wire.Bind(new(usecase.ChatUseCase), new(*usecase.ChatUseCaseImpl)), http.NewChatController)

var grpcClientSet = wire.NewSet(client.NewAuthClient, client.NewChatClient)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware, middleware.NewWebsocketMiddleware)
