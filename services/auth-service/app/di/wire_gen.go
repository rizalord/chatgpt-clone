// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"auth-service/app/config"
	"auth-service/app/delivery/client"
	"auth-service/app/delivery/handler"
	"auth-service/app/helper"
	"auth-service/app/route"
	"auth-service/app/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializedApp() *config.App {
	logger := config.NewLogger()
	viper := config.NewViper(logger)
	server := config.NewGrpcServer(logger)
	validate := config.NewValidator()
	jwtHelperImpl := helper.NewJWTHelperImpl(viper)
	userClient := client.NewUserClient(viper)
	oAuthImpl := helper.NewOauthImpl(logger, viper)
	authUseCaseImpl := usecase.NewAuthUseCaseImpl(validate, jwtHelperImpl, logger, userClient, oAuthImpl)
	authServiceImpl := handler.NewAuthServiceImpl(authUseCaseImpl)
	grpcServerRouter := route.NewGrpcServerRouter(server, authServiceImpl)
	app := config.NewApp(viper, grpcServerRouter, userClient)
	return app
}

// wire.go:

var authSet = wire.NewSet(usecase.NewAuthUseCaseImpl, wire.Bind(new(usecase.AuthUseCase), new(*usecase.AuthUseCaseImpl)), handler.NewAuthServiceImpl, wire.Bind(new(handler.AuthService), new(*handler.AuthServiceImpl)))
