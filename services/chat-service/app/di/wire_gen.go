// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"auth-service/app/config"
	"auth-service/app/delivery/handler"
	"auth-service/app/repository"
	"auth-service/app/route"
	"auth-service/app/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializedApp() *config.App {
	logger := config.NewLogger()
	server := config.NewGrpcServer(logger)
	viper := config.NewViper(logger)
	db := config.NewDatabase(viper)
	chatRepositoryImpl := repository.NewChatRepositoryImpl()
	validate := config.NewValidator()
	chatUseCaseImpl := usecase.NewChatUseCaseImpl(db, chatRepositoryImpl, logger, validate)
	messageRepositoryImpl := repository.NewMessageRepositoryImpl()
	client := config.NewGemini(viper, logger)
	messageUseCaseImpl := usecase.NewMessageUseCaseImpl(db, messageRepositoryImpl, chatRepositoryImpl, client, logger, validate)
	chatServiceImpl := handler.NewChatServiceImpl(chatUseCaseImpl, messageUseCaseImpl)
	grpcServerRouter := route.NewGrpcServerRouter(server, chatServiceImpl)
	app := config.NewApp(grpcServerRouter, viper, db)
	return app
}

// wire.go:

var chatSet = wire.NewSet(repository.NewChatRepositoryImpl, wire.Bind(new(repository.ChatRepository), new(*repository.ChatRepositoryImpl)), usecase.NewChatUseCaseImpl, wire.Bind(new(usecase.ChatUseCase), new(*usecase.ChatUseCaseImpl)))

var messageSet = wire.NewSet(repository.NewMessageRepositoryImpl, wire.Bind(new(repository.MessageRepository), new(*repository.MessageRepositoryImpl)), usecase.NewMessageUseCaseImpl, wire.Bind(new(usecase.MessageUseCase), new(*usecase.MessageUseCaseImpl)))

var serviceSet = wire.NewSet(handler.NewChatServiceImpl, wire.Bind(new(handler.ChatService), new(*handler.ChatServiceImpl)))
